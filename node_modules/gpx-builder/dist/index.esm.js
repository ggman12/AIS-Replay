import { create } from 'xmlbuilder';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

class XMLCreator {
  constructor(settings) {
    if (settings === void 0) {
      settings = {};
    }

    _defineProperty(this, "settings", void 0);

    this.settings = settings;
  } // eslint-disable-next-line complexity


  processXmlItem(dir, key, value) {
    if (key === 'attributes') {
      Object.keys(value).forEach(attribute => {
        dir.attribute(attribute, value[attribute]);
      });
      return;
    }

    if (key === 'email') {
      const email = value.split('@');
      dir.ele(key, {
        id: email[0],
        domain: email[1]
      });
      return;
    }

    if (value instanceof Date) {
      dir.ele(key, value.toISOString());
      return;
    }

    if (Array.isArray(value) && typeof value[0] === 'object') {
      value.forEach(item => {
        this.generateXmlData(dir.ele(key), item);
      });
      return;
    }

    if (Array.isArray(value)) {
      dir.ele(key, value.join(','));
      return;
    }

    if (typeof value === 'object') {
      this.generateXmlData(dir.ele(key), value);
      return;
    }

    dir.ele(key, value);
  }

  generateXmlData(dir, object) {
    Object.keys(object).map(key => {
      return {
        key,
        value: object[key]
      };
    }).forEach((_ref) => {
      let key = _ref.key,
          value = _ref.value;
      this.processXmlItem(dir, key, value);
    });
  }

  toString(data) {
    const root = create('gpx', {
      encoding: 'UTF-8'
    });
    this.generateXmlData(root, data);
    return root.end(_objectSpread({
      allowEmpty: true,
      indent: '  ',
      newline: '\n',
      pretty: true
    }, this.settings));
  }

}

class Bounds {
  /**
   * @see http://www.topografix.com/gpx/1/1/#type_boundsType
   */
  constructor(minlat, minlon, maxlat, maxlon) {
    _defineProperty(this, "minlat", void 0);

    _defineProperty(this, "minlon", void 0);

    _defineProperty(this, "maxlat", void 0);

    _defineProperty(this, "maxlon", void 0);

    this.minlat = minlat;
    this.minlon = minlon;
    this.maxlat = maxlat;
    this.maxlon = maxlon;
  }

  toObject() {
    const minlat = this.minlat,
          minlon = this.minlon,
          maxlat = this.maxlat,
          maxlon = this.maxlon;
    return {
      attributes: {
        minlat,
        minlon,
        maxlat,
        maxlon
      }
    };
  }

}

class Copyright {
  // eslint-disable-next-line jsdoc/check-param-names

  /**
   * @param author - Owner of licence
   * @param year - Year of licence
   * @param license - Type of licence
   * @see http://www.topografix.com/gpx/1/1/#type_copyrightType
   */
  constructor(author, _ref) {
    let year = _ref.year,
        license = _ref.license;

    _defineProperty(this, "author", void 0);

    _defineProperty(this, "year", void 0);

    _defineProperty(this, "license", void 0);

    this.author = author;
    this.year = year || null;
    this.license = license || null;
  }

  toObject() {
    const author = this.author,
          year = this.year,
          license = this.license;
    return _objectSpread({
      attributes: {
        author
      }
    }, year ? {
      year
    } : {}, license ? {
      license
    } : {});
  }

}

class Link {
  /**
   * @see http://www.topografix.com/gpx/1/1/#type_linkType
   */
  constructor(href, _ref) {
    let text = _ref.text,
        type = _ref.type;

    _defineProperty(this, "href", void 0);

    _defineProperty(this, "text", void 0);

    _defineProperty(this, "type", void 0);

    this.href = href;
    this.text = text || null;
    this.type = type || null;
  }

  toObject() {
    const href = this.href,
          text = this.text,
          type = this.type;
    return _objectSpread({
      attributes: {
        href
      }
    }, text ? {
      text
    } : {}, type ? {
      type
    } : {});
  }

}

class Metadata {
  /**
   * @see http://www.topografix.com/gpx/1/1/#type_metadataType
   */
  // eslint-disable-next-line
  constructor(_ref) {
    let name = _ref.name,
        desc = _ref.desc,
        author = _ref.author,
        copyright = _ref.copyright,
        link = _ref.link,
        time = _ref.time,
        keywords = _ref.keywords,
        bounds = _ref.bounds,
        extensions = _ref.extensions;

    _defineProperty(this, "name", void 0);

    _defineProperty(this, "desc", void 0);

    _defineProperty(this, "author", void 0);

    _defineProperty(this, "copyright", void 0);

    _defineProperty(this, "link", void 0);

    _defineProperty(this, "time", void 0);

    _defineProperty(this, "keywords", void 0);

    _defineProperty(this, "bounds", void 0);

    _defineProperty(this, "extensions", void 0);

    this.name = name || null;
    this.desc = desc || null;
    this.author = author || null;
    this.copyright = copyright || null;
    this.link = link || null;
    this.time = time || null;
    this.keywords = keywords || null;
    this.bounds = bounds || null;
    this.extensions = extensions || null;
  } // eslint-disable-next-line complexity


  toObject() {
    const name = this.name,
          desc = this.desc,
          author = this.author,
          copyright = this.copyright,
          link = this.link,
          time = this.time,
          keywords = this.keywords,
          bounds = this.bounds,
          extensions = this.extensions;
    return _objectSpread({}, name ? {
      name
    } : {}, desc ? {
      desc
    } : {}, author ? {
      author: author.toObject()
    } : {}, copyright ? {
      copyright: copyright.toObject()
    } : {}, link ? {
      link: link.toObject()
    } : {}, time ? {
      time
    } : {}, keywords ? {
      keywords
    } : {}, bounds ? {
      bounds: bounds.toObject()
    } : {}, extensions ? {
      extensions
    } : {});
  }

}

class Person {
  /**
   * @see http://www.topografix.com/gpx/1/1/#type_personType
   */
  constructor(_ref) {
    let name = _ref.name,
        email = _ref.email,
        link = _ref.link;

    _defineProperty(this, "name", void 0);

    _defineProperty(this, "email", void 0);

    _defineProperty(this, "link", void 0);

    this.name = name || null;
    this.email = email || null;
    this.link = link || null;
  }

  toObject() {
    const name = this.name,
          email = this.email,
          link = this.link;
    return _objectSpread({}, name ? {
      name
    } : {}, email ? {
      email
    } : {}, link ? {
      link: link.toObject()
    } : {});
  }

}

class Point {
  /**
   * @see http://www.topografix.com/gpx/1/1/#type_wptType
   */
  // eslint-disable-next-line complexity
  constructor(lat, lon, _temp) {
    let _ref = _temp === void 0 ? {} : _temp,
        ele = _ref.ele,
        time = _ref.time,
        magvar = _ref.magvar,
        geoidheight = _ref.geoidheight,
        name = _ref.name,
        cmt = _ref.cmt,
        desc = _ref.desc,
        src = _ref.src,
        link = _ref.link,
        sym = _ref.sym,
        type = _ref.type,
        fix = _ref.fix,
        sat = _ref.sat,
        hdop = _ref.hdop,
        vdop = _ref.vdop,
        pdop = _ref.pdop,
        ageofdgpsdata = _ref.ageofdgpsdata,
        dgpsid = _ref.dgpsid,
        extensions = _ref.extensions;

    _defineProperty(this, "lat", void 0);

    _defineProperty(this, "lon", void 0);

    _defineProperty(this, "ele", void 0);

    _defineProperty(this, "time", void 0);

    _defineProperty(this, "magvar", void 0);

    _defineProperty(this, "geoidheight", void 0);

    _defineProperty(this, "name", void 0);

    _defineProperty(this, "cmt", void 0);

    _defineProperty(this, "desc", void 0);

    _defineProperty(this, "src", void 0);

    _defineProperty(this, "link", void 0);

    _defineProperty(this, "sym", void 0);

    _defineProperty(this, "type", void 0);

    _defineProperty(this, "fix", void 0);

    _defineProperty(this, "sat", void 0);

    _defineProperty(this, "hdop", void 0);

    _defineProperty(this, "vdop", void 0);

    _defineProperty(this, "pdop", void 0);

    _defineProperty(this, "ageofdgpsdata", void 0);

    _defineProperty(this, "dgpsid", void 0);

    _defineProperty(this, "extensions", void 0);

    this.lat = lat;
    this.lon = lon;
    this.ele = ele || null;
    this.time = time || null;
    this.magvar = magvar || null;
    this.geoidheight = geoidheight || null;
    this.name = name || null;
    this.cmt = cmt || null;
    this.desc = desc || null;
    this.src = src || null;
    this.link = link || null;
    this.sym = sym || null;
    this.type = type || null;
    this.fix = fix || null;
    this.sat = sat || null;
    this.hdop = hdop || null;
    this.vdop = vdop || null;
    this.pdop = pdop || null;
    this.ageofdgpsdata = ageofdgpsdata || null;
    this.dgpsid = dgpsid || null;
    this.extensions = extensions || null;
  } // eslint-disable-next-line complexity


  toObject() {
    const lat = this.lat,
          lon = this.lon,
          ele = this.ele,
          time = this.time,
          magvar = this.magvar,
          geoidheight = this.geoidheight,
          name = this.name,
          cmt = this.cmt,
          desc = this.desc,
          src = this.src,
          link = this.link,
          sym = this.sym,
          type = this.type,
          fix = this.fix,
          sat = this.sat,
          hdop = this.hdop,
          vdop = this.vdop,
          pdop = this.pdop,
          ageofdgpsdata = this.ageofdgpsdata,
          dgpsid = this.dgpsid,
          extensions = this.extensions;
    return _objectSpread({
      attributes: {
        lat,
        lon
      }
    }, ele ? {
      ele
    } : {}, time ? {
      time
    } : {}, magvar ? {
      magvar
    } : {}, geoidheight ? {
      geoidheight
    } : {}, name ? {
      name
    } : {}, cmt ? {
      cmt
    } : {}, desc ? {
      desc
    } : {}, src ? {
      src
    } : {}, link ? {
      link: link.toObject()
    } : {}, sym ? {
      sym
    } : {}, type ? {
      type
    } : {}, fix ? {
      fix
    } : {}, sat ? {
      sat
    } : {}, hdop ? {
      hdop
    } : {}, vdop ? {
      vdop
    } : {}, pdop ? {
      pdop
    } : {}, ageofdgpsdata ? {
      ageofdgpsdata
    } : {}, dgpsid ? {
      dgpsid
    } : {}, extensions && Object.keys(extensions).length > 0 ? {
      extensions
    } : {});
  }

}

class Segment {
  /**
   * @see http://www.topografix.com/gpx/1/1/#type_trksegType
   */
  constructor(trkpt, extensions) {
    if (extensions === void 0) {
      extensions = null;
    }

    _defineProperty(this, "trkpt", void 0);

    _defineProperty(this, "extensions", void 0);

    this.trkpt = trkpt;
    this.extensions = extensions || null;
  }

  setPoints(trkpt) {
    this.trkpt = trkpt;
    return this;
  }

  toObject() {
    const trkpt = this.trkpt,
          extensions = this.extensions;
    return _objectSpread({
      trkpt: trkpt.map(point => point.toObject())
    }, extensions ? {
      extensions
    } : {});
  }

}

class Track {
  /**
   * @see http://www.topografix.com/gpx/1/1/#type_trkType
   */
  // eslint-disable-next-line complexity
  constructor(trkseg, _temp) {
    let _ref = _temp === void 0 ? {} : _temp,
        name = _ref.name,
        cmt = _ref.cmt,
        desc = _ref.desc,
        src = _ref.src,
        link = _ref.link,
        number = _ref.number,
        type = _ref.type,
        extensions = _ref.extensions;

    _defineProperty(this, "name", void 0);

    _defineProperty(this, "cmt", void 0);

    _defineProperty(this, "desc", void 0);

    _defineProperty(this, "src", void 0);

    _defineProperty(this, "link", void 0);

    _defineProperty(this, "number", void 0);

    _defineProperty(this, "type", void 0);

    _defineProperty(this, "extensions", void 0);

    _defineProperty(this, "trkseg", void 0);

    this.name = name || null;
    this.cmt = cmt || null;
    this.desc = desc || null;
    this.src = src || null;
    this.link = link || null;
    this.number = number || null;
    this.type = type || null;
    this.extensions = extensions || null;
    this.trkseg = trkseg || null;
  }

  setSegments(trkseg) {
    this.trkseg = trkseg;
    return this;
  } // eslint-disable-next-line complexity


  toObject() {
    const name = this.name,
          cmt = this.cmt,
          desc = this.desc,
          src = this.src,
          link = this.link,
          number = this.number,
          type = this.type,
          extensions = this.extensions,
          trkseg = this.trkseg;
    return _objectSpread({}, name ? {
      name
    } : {}, cmt ? {
      cmt
    } : {}, desc ? {
      desc
    } : {}, src ? {
      src
    } : {}, link ? {
      link: link.toObject()
    } : {}, number ? {
      number
    } : {}, type ? {
      type
    } : {}, extensions ? {
      extensions
    } : {}, trkseg ? {
      trkseg: trkseg.map(segment => segment.toObject())
    } : {});
  }

}



var models = ({
  Bounds: Bounds,
  Copyright: Copyright,
  Track: Track,
  Segment: Segment,
  Point: Point,
  Metadata: Metadata,
  Person: Person,
  Link: Link
});

class BaseBuilder {
  constructor() {
    _defineProperty(this, "data", void 0);

    _defineProperty(this, "schemaLocation", void 0);

    this.data = {};
    this.schemaLocation = ['http://www.topografix.com/GPX/1/1', 'http://www.topografix.com/GPX/1/1/gpx.xsd'];
  }
  /**
   * Set metadata object.
   *
   * @param metadata - Metadata object
   * @returns {BaseBuilder} self
   */


  setMetadata(metadata) {
    this.data.metadata = metadata.toObject();
    return this;
  }
  /**
   * Set list of waypoints
   *
   * @param waypoints - Points objects
   * @returns {BaseBuilder} self
   */


  setWayPoints(waypoints) {
    this.data.wpt = waypoints.map(point => point.toObject());
    return this;
  }
  /**
   * Set list of routes.
   *
   * @param routes - List of routes
   * @returns {BaseBuilder} self
   */


  setRoutes(routes) {
    this.data.rte = routes;
    return this;
  }
  /**
   * Set list of tracks.
   *
   * @param tracks - List of tracks
   * @returns {BaseBuilder} self
   */


  setTracks(tracks) {
    this.data.trk = tracks.map(track => track.toObject());
    return this;
  }
  /**
   * Set extension Object.
   *
   * @param extensions - Extensions
   * @returns {BaseBuilder} self
   */


  setExtensions(extensions) {
    this.data.extensions = extensions;
    return this;
  }
  /**
   * Simple method to set list of points to single track and segment.
   *
   * @param points - list of Points
   * @returns {BaseBuilder} self
   */


  setSegmentPoints(points) {
    this.setTracks([new Track([new Segment(points)])]);
    return this;
  }
  /**
   * Object that can be used to build XML file.
   *
   * @returns {GPXBuildData}
   */


  toObject() {
    return _objectSpread({}, this.data, {
      attributes: _objectSpread({
        creator: 'fabulator:gpx-builder',
        version: '1.1',
        xmlns: 'http://www.topografix.com/GPX/1/1',
        'xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance',
        'xsi:schemaLocation': this.schemaLocation.join(' ')
      }, this.data.attributes)
    });
  }

}

_defineProperty(BaseBuilder, "MODELS", models);

// @flow strict

class GarminPoint extends Point {
  /**
   * Extended garmin point.
   *
   * @see https://www8.garmin.com/xmlschemas/TrackPointExtensionv2.xsd
   */
  // eslint-disable-next-line complexity
  constructor(lat, lon, options) {
    if (options === void 0) {
      options = {};
    }

    super(lat, lon, options);
    const _options = options,
          hr = _options.hr,
          cad = _options.cad,
          speed = _options.speed,
          atemp = _options.atemp,
          wtemp = _options.wtemp,
          depth = _options.depth,
          course = _options.course,
          bearing = _options.bearing;
    const extensionPrefix = 'gpxtpx';
    const trackPointExtension = `${extensionPrefix}:TrackPointExtension`;

    const data = _objectSpread({}, hr ? {
      [`${extensionPrefix}:hr`]: hr
    } : {}, cad ? {
      [`${extensionPrefix}:cad`]: cad
    } : {}, speed ? {
      [`${extensionPrefix}:speed`]: speed
    } : {}, atemp ? {
      [`${extensionPrefix}:atemp`]: atemp
    } : {}, wtemp ? {
      [`${extensionPrefix}:wtemp`]: wtemp
    } : {}, depth ? {
      [`${extensionPrefix}:depth`]: depth
    } : {}, course ? {
      [`${extensionPrefix}:course`]: course
    } : {}, bearing ? {
      [`${extensionPrefix}:bearing`]: bearing
    } : {});

    this.extensions = _objectSpread({}, this.extensions, Object.keys(data).length > 0 ? {
      [trackPointExtension]: data
    } : {});
  }

}

class GarminBuilder extends BaseBuilder {
  /**
   * Garmin builder include extension for speed, hear rate, cadence, ...
   */
  constructor() {
    super();
    this.schemaLocation = [...this.schemaLocation, 'http://www.garmin.com/xmlschemas/TrackPointExtension/v1', 'http://www.garmin.com/xmlschemas/TrackPointExtensionv1.xsd', 'http://www.garmin.com/xmlschemas/GpxExtensions/v3', 'http://www.garmin.com/xmlschemas/GpxExtensionsv3.xsd'];
    this.data = _objectSpread({}, this.data, {
      attributes: _objectSpread({}, this.data.attributes, {
        'xmlns:gpxtpx': 'http://www.garmin.com/xmlschemas/TrackPointExtension/v1',
        'xmlns:gpxx': 'http://www.garmin.com/xmlschemas/GpxExtensions/v3'
      })
    });
  }

}

_defineProperty(GarminBuilder, "MODELS", _objectSpread({}, BaseBuilder.MODELS, {
  Point: GarminPoint
}));

/**
 * Function that create XML string with GPX data.
 *
 * @param data - Formated data
 * @param creator - Creator that converts data to XML string
 * @returns XML string
 */
function buildGPX(data, creator) {
  const gpxCreator = creator || new XMLCreator();
  return gpxCreator.toString(data);
}

export { BaseBuilder, GarminBuilder, buildGPX };

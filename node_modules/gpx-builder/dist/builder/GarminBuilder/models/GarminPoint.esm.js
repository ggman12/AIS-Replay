function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

class Point {
  /**
   * @see http://www.topografix.com/gpx/1/1/#type_wptType
   */
  // eslint-disable-next-line complexity
  constructor(lat, lon, _temp) {
    let _ref = _temp === void 0 ? {} : _temp,
        ele = _ref.ele,
        time = _ref.time,
        magvar = _ref.magvar,
        geoidheight = _ref.geoidheight,
        name = _ref.name,
        cmt = _ref.cmt,
        desc = _ref.desc,
        src = _ref.src,
        link = _ref.link,
        sym = _ref.sym,
        type = _ref.type,
        fix = _ref.fix,
        sat = _ref.sat,
        hdop = _ref.hdop,
        vdop = _ref.vdop,
        pdop = _ref.pdop,
        ageofdgpsdata = _ref.ageofdgpsdata,
        dgpsid = _ref.dgpsid,
        extensions = _ref.extensions;

    _defineProperty(this, "lat", void 0);

    _defineProperty(this, "lon", void 0);

    _defineProperty(this, "ele", void 0);

    _defineProperty(this, "time", void 0);

    _defineProperty(this, "magvar", void 0);

    _defineProperty(this, "geoidheight", void 0);

    _defineProperty(this, "name", void 0);

    _defineProperty(this, "cmt", void 0);

    _defineProperty(this, "desc", void 0);

    _defineProperty(this, "src", void 0);

    _defineProperty(this, "link", void 0);

    _defineProperty(this, "sym", void 0);

    _defineProperty(this, "type", void 0);

    _defineProperty(this, "fix", void 0);

    _defineProperty(this, "sat", void 0);

    _defineProperty(this, "hdop", void 0);

    _defineProperty(this, "vdop", void 0);

    _defineProperty(this, "pdop", void 0);

    _defineProperty(this, "ageofdgpsdata", void 0);

    _defineProperty(this, "dgpsid", void 0);

    _defineProperty(this, "extensions", void 0);

    this.lat = lat;
    this.lon = lon;
    this.ele = ele || null;
    this.time = time || null;
    this.magvar = magvar || null;
    this.geoidheight = geoidheight || null;
    this.name = name || null;
    this.cmt = cmt || null;
    this.desc = desc || null;
    this.src = src || null;
    this.link = link || null;
    this.sym = sym || null;
    this.type = type || null;
    this.fix = fix || null;
    this.sat = sat || null;
    this.hdop = hdop || null;
    this.vdop = vdop || null;
    this.pdop = pdop || null;
    this.ageofdgpsdata = ageofdgpsdata || null;
    this.dgpsid = dgpsid || null;
    this.extensions = extensions || null;
  } // eslint-disable-next-line complexity


  toObject() {
    const lat = this.lat,
          lon = this.lon,
          ele = this.ele,
          time = this.time,
          magvar = this.magvar,
          geoidheight = this.geoidheight,
          name = this.name,
          cmt = this.cmt,
          desc = this.desc,
          src = this.src,
          link = this.link,
          sym = this.sym,
          type = this.type,
          fix = this.fix,
          sat = this.sat,
          hdop = this.hdop,
          vdop = this.vdop,
          pdop = this.pdop,
          ageofdgpsdata = this.ageofdgpsdata,
          dgpsid = this.dgpsid,
          extensions = this.extensions;
    return _objectSpread({
      attributes: {
        lat,
        lon
      }
    }, ele ? {
      ele
    } : {}, time ? {
      time
    } : {}, magvar ? {
      magvar
    } : {}, geoidheight ? {
      geoidheight
    } : {}, name ? {
      name
    } : {}, cmt ? {
      cmt
    } : {}, desc ? {
      desc
    } : {}, src ? {
      src
    } : {}, link ? {
      link: link.toObject()
    } : {}, sym ? {
      sym
    } : {}, type ? {
      type
    } : {}, fix ? {
      fix
    } : {}, sat ? {
      sat
    } : {}, hdop ? {
      hdop
    } : {}, vdop ? {
      vdop
    } : {}, pdop ? {
      pdop
    } : {}, ageofdgpsdata ? {
      ageofdgpsdata
    } : {}, dgpsid ? {
      dgpsid
    } : {}, extensions && Object.keys(extensions).length > 0 ? {
      extensions
    } : {});
  }

}

class GarminPoint extends Point {
  /**
   * Extended garmin point.
   *
   * @see https://www8.garmin.com/xmlschemas/TrackPointExtensionv2.xsd
   */
  // eslint-disable-next-line complexity
  constructor(lat, lon, options) {
    if (options === void 0) {
      options = {};
    }

    super(lat, lon, options);
    const _options = options,
          hr = _options.hr,
          cad = _options.cad,
          speed = _options.speed,
          atemp = _options.atemp,
          wtemp = _options.wtemp,
          depth = _options.depth,
          course = _options.course,
          bearing = _options.bearing;
    const extensionPrefix = 'gpxtpx';
    const trackPointExtension = `${extensionPrefix}:TrackPointExtension`;

    const data = _objectSpread({}, hr ? {
      [`${extensionPrefix}:hr`]: hr
    } : {}, cad ? {
      [`${extensionPrefix}:cad`]: cad
    } : {}, speed ? {
      [`${extensionPrefix}:speed`]: speed
    } : {}, atemp ? {
      [`${extensionPrefix}:atemp`]: atemp
    } : {}, wtemp ? {
      [`${extensionPrefix}:wtemp`]: wtemp
    } : {}, depth ? {
      [`${extensionPrefix}:depth`]: depth
    } : {}, course ? {
      [`${extensionPrefix}:course`]: course
    } : {}, bearing ? {
      [`${extensionPrefix}:bearing`]: bearing
    } : {});

    this.extensions = _objectSpread({}, this.extensions, Object.keys(data).length > 0 ? {
      [trackPointExtension]: data
    } : {});
  }

}

export default GarminPoint;

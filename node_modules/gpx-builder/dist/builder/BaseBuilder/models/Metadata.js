'use strict';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

class Metadata {
  /**
   * @see http://www.topografix.com/gpx/1/1/#type_metadataType
   */
  // eslint-disable-next-line
  constructor(_ref) {
    let name = _ref.name,
        desc = _ref.desc,
        author = _ref.author,
        copyright = _ref.copyright,
        link = _ref.link,
        time = _ref.time,
        keywords = _ref.keywords,
        bounds = _ref.bounds,
        extensions = _ref.extensions;

    _defineProperty(this, "name", void 0);

    _defineProperty(this, "desc", void 0);

    _defineProperty(this, "author", void 0);

    _defineProperty(this, "copyright", void 0);

    _defineProperty(this, "link", void 0);

    _defineProperty(this, "time", void 0);

    _defineProperty(this, "keywords", void 0);

    _defineProperty(this, "bounds", void 0);

    _defineProperty(this, "extensions", void 0);

    this.name = name || null;
    this.desc = desc || null;
    this.author = author || null;
    this.copyright = copyright || null;
    this.link = link || null;
    this.time = time || null;
    this.keywords = keywords || null;
    this.bounds = bounds || null;
    this.extensions = extensions || null;
  } // eslint-disable-next-line complexity


  toObject() {
    const name = this.name,
          desc = this.desc,
          author = this.author,
          copyright = this.copyright,
          link = this.link,
          time = this.time,
          keywords = this.keywords,
          bounds = this.bounds,
          extensions = this.extensions;
    return _objectSpread({}, name ? {
      name
    } : {}, desc ? {
      desc
    } : {}, author ? {
      author: author.toObject()
    } : {}, copyright ? {
      copyright: copyright.toObject()
    } : {}, link ? {
      link: link.toObject()
    } : {}, time ? {
      time
    } : {}, keywords ? {
      keywords
    } : {}, bounds ? {
      bounds: bounds.toObject()
    } : {}, extensions ? {
      extensions
    } : {});
  }

}

module.exports = Metadata;

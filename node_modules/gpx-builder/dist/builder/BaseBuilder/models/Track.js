'use strict';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

class Track {
  /**
   * @see http://www.topografix.com/gpx/1/1/#type_trkType
   */
  // eslint-disable-next-line complexity
  constructor(trkseg, _temp) {
    let _ref = _temp === void 0 ? {} : _temp,
        name = _ref.name,
        cmt = _ref.cmt,
        desc = _ref.desc,
        src = _ref.src,
        link = _ref.link,
        number = _ref.number,
        type = _ref.type,
        extensions = _ref.extensions;

    _defineProperty(this, "name", void 0);

    _defineProperty(this, "cmt", void 0);

    _defineProperty(this, "desc", void 0);

    _defineProperty(this, "src", void 0);

    _defineProperty(this, "link", void 0);

    _defineProperty(this, "number", void 0);

    _defineProperty(this, "type", void 0);

    _defineProperty(this, "extensions", void 0);

    _defineProperty(this, "trkseg", void 0);

    this.name = name || null;
    this.cmt = cmt || null;
    this.desc = desc || null;
    this.src = src || null;
    this.link = link || null;
    this.number = number || null;
    this.type = type || null;
    this.extensions = extensions || null;
    this.trkseg = trkseg || null;
  }

  setSegments(trkseg) {
    this.trkseg = trkseg;
    return this;
  } // eslint-disable-next-line complexity


  toObject() {
    const name = this.name,
          cmt = this.cmt,
          desc = this.desc,
          src = this.src,
          link = this.link,
          number = this.number,
          type = this.type,
          extensions = this.extensions,
          trkseg = this.trkseg;
    return _objectSpread({}, name ? {
      name
    } : {}, cmt ? {
      cmt
    } : {}, desc ? {
      desc
    } : {}, src ? {
      src
    } : {}, link ? {
      link: link.toObject()
    } : {}, number ? {
      number
    } : {}, type ? {
      type
    } : {}, extensions ? {
      extensions
    } : {}, trkseg ? {
      trkseg: trkseg.map(segment => segment.toObject())
    } : {});
  }

}

module.exports = Track;

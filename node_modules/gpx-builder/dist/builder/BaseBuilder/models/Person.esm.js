function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

class Person {
  /**
   * @see http://www.topografix.com/gpx/1/1/#type_personType
   */
  constructor(_ref) {
    let name = _ref.name,
        email = _ref.email,
        link = _ref.link;

    _defineProperty(this, "name", void 0);

    _defineProperty(this, "email", void 0);

    _defineProperty(this, "link", void 0);

    this.name = name || null;
    this.email = email || null;
    this.link = link || null;
  }

  toObject() {
    const name = this.name,
          email = this.email,
          link = this.link;
    return _objectSpread({}, name ? {
      name
    } : {}, email ? {
      email
    } : {}, link ? {
      link: link.toObject()
    } : {});
  }

}

export default Person;
